#!/bin/bash
bar-network() {
	state=""
	if  compgen -G "/sys/class/net/e*"> /dev/null ; then
		eth=$(cat /sys/class/net/e*/operstate)
	fi

	if compgen -G "/sys/class/net/w*"> /dev/null; then
		wifi=$(cat /sys/class/net/w*/operstate)
	fi

	if compgen -G "/sys/class/net/tun*"> /dev/null; then
		tun=$(cat /sys/class/net/tun*/operstate)
	fi
	
	internet_access_up=$(curl -sLI -o /dev/null -w "%{http_code}" --max-time 8 google.com)

	if [ "$internet_access_up" = "200" ]; then
		state=$state"🌐"
	else
		state=$state"📵"
	fi

	if [[ "$eth" == *"up"* ]]; then
		state=$state"󰈁"
	fi
	
	if [[ "$wifi" == *"up"* ]]; then
		state=$state"󰖩"
	fi
	
	if [[ "$tun" == *"up"* ]]; then
		state=$state""
	fi

	echo $state
}

bar-battery() {
	battery=$(cat /sys/class/power_supply/BAT0/capacity)
	status=$(cat /sys/class/power_supply/BAT0/status)
	pluggedin=$(cat /sys/class/power_supply/AC/online)

	if [ "$pluggedin" = "1" ]; then
		echo -n "🔌"
	fi

	if [ "$status" = "Discharging" ]; then
		if [ "$battery" -gt 20 ]; then
			echo -n "🔋"
		else
			echo -n "🪫"
		fi
	fi
	if [ "$status" = "Charging" ]; then
		echo -n "⚡️"
	fi
	echo -n "$battery%"
}

bar-cputemp() {
	echo "🌡️"$(sensors | awk '/Package id 0/ {print $4}' | grep -oP '\+\K[0-9]+\.[0-9]+..')
}

bar-memory() {
	echo $(free -h | awk '/^Mem/ { print $3"/"$2 }' | sed s/i//g)
}

bar-date() {
	echo $(date '+%Y-%m-%d %T %Z')
}

bar-wttr() {
	echo $(curl -s "wttr.in?format=2&location=Poissy")
}

bar-volume() {
	output=""

	speaker_usb2i2=alsa_output.usb-Focusrite_Scarlett_2i2_USB_Y8QWAQ69B26B58-00.analog-stereo
	speaker_usbzonevibe=alsa_output.usb-Logitech_Zone_Vibe_125_2216MH00LMF8-00.analog-stereo
	speaker_internal=alsa_output.pci-0000_00_1f.3-platform-skl_hda_dsp_generic.HiFi__hw_sofhdadsp__sink

	mic_usb2i2=alsa_input.usb-Focusrite_Scarlett_2i2_USB_Y8QWAQ69B26B58-00.analog-stereo
	mic_usbzonevibe=alsa_input.usb-Logitech_Zone_Vibe_125_2216MH00LMF8-00.mono-fallback
	mic_internal=alsa_input.pci-0000_00_1f.3-platform-skl_hda_dsp_generic.HiFi__hw_sofhdadsp_6__source

	cspeaker_module_id=$(pactl list short modules | grep "sink_name=from-desktop" | awk '{print $1}')
	cspeaker_sink_input_id=$(pactl -f json list sink-inputs | jq -r ".[] | select(.owner_module == \"$cspeaker_module_id\") | .sink")
	cspeaker_name=$(pactl -f json list sinks | jq -r ".[] | select(.index == $cspeaker_sink_input_id ) | .name ")
	
	mic_module_id=$(pactl list short modules | grep "source_name=mic01-processed" | awk '{print $1}')
	mic_source_input_id=$(pactl -f json list source-outputs | jq -r ".[] | select(.owner_module == \"$mic_module_id\") | .source")
	mic_name=$(pactl -f json list sources | jq -r ".[] | select(.index == $mic_source_input_id ) | .name ")

	speakervol=$(pactl get-sink-volume $cspeaker_sink_input_id)
	notconfigured=$?

	if [ $notconfigured -ne 0 ]; then
		output=$output"󰓄 N/A"
	else
		muted=$(pactl get-sink-mute $cspeaker_sink_input_id | awk '{print $2}')
		if [ "$muted" = "yes" ]; then
			output=$output"󰓄 Muted"
		else
			volume=$(echo $speakervol | head -n 1 | awk '{print $5}')
			output=$output"󰓃 $volume"
		fi
	fi

	desktopmuted=$(pactl get-sink-mute from-desktop | awk '{print $2}')
	if [ "$desktopmuted" = "yes" ]; then
		output=$output" 󰬅"
	else
		output=$output" 󰎇"
	fi

	callermuted=$(pactl get-sink-mute from-caller | awk '{print $2}')
	if [ "$callermuted" = "yes" ]; then
		output=$output" 󰬅"
	else
		output=$output" "
	fi

	if [ $notconfigured -eq 0 ]; then
		mic01muted=$(pactl get-source-mute mic01-processed | awk '{print $2}')
		if [ "$mic01muted" = "yes" ]; then
			output=$output" 󰬅"
		else
			output=$output" "
		fi
		
		mic02muted=$(pactl get-source-mute mic02-processed | awk '{print $2}')
		if [ "$mic02muted" = "yes" ]; then
			output=$output" 󰬅"
		else
			output=$output" "
		fi
	# 	tocallervol=$(pactl get-source-volume to-caller)
	# 	callervolume=$(echo $tocallervol | head -n 1 | awk '{print $5}')
	# 	output="$output $callervolume"
	fi

	if [ "$mic_name" = "$mic_usb2i2" ]; then
		output="$output 2I2"
	elif [ "$mic_name" = "$mic_usbzonevibe" ]; then
		output="$output ZVI"
	elif [ "$mic_name" = "$mic_internal" ]; then
		output="$output INT"
	fi

	if [ "$cspeaker_name" = "$speaker_usb2i2" ]; then
		output="$output/2I2"
	elif [ "$cspeaker_name" = "$speaker_usbzonevibe" ]; then
		output="$output/ZVI"
	elif [ "$cspeaker_name" = "$speaker_internal" ]; then
		output="$output/INT"
	fi

	echo $output
}

notifs(){
	notifispaused=$(dunstctl is-paused)
	if [ "$notifispaused" = "true" ]; then
		echo "🔕"
	else
		echo "🔔"
	fi
}

command=$1

if [ "$command" = "network" ]; then
	bar-network 
elif [ "$command" = "battery" ]; then
	bar-battery
elif [ "$command" = "cputemp" ]; then
	bar-cputemp
elif [ "$command" = "memory" ]; then
	bar-memory
elif [ "$command" = "date" ]; then
	bar-date
elif [ "$command" = "wttr" ]; then
	bar-wttr
elif [ "$command" = "volume" ]; then
	bar-volume
elif [ "$command" = "notifs" ]; then
	notifs
else
	echo "Invalid command"
fi
